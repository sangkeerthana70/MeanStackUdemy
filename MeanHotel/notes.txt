Angular.js
Lexture-36
1-ng-app is the appdirective that defines the scope of the angular.js inside the html and has to be placed in th top inside html tag.

2-ng-model is a Binding directives which binds the (model)user input box with the browser and updates
reflects the ouput as and when the model is updated.

3-ng-init is used to initialize a variable and can be any data types. But this not recommended.

4-ng-if and ng-show have similar functionalities.To show and hide if a checkbox is clicked.
The only difference between ng-if and ng-show is that ng-if removes the element(p tag where it is defined) from the DOM tree. Wheras ng-show will apply a CSS property to hide elements and not remove it from the DOM tree.
This is important because if you add some styling to paragraph and use ng-show it will still preserve the styling and not totally remove it. Wheras while doing this with ng-if it will remove all the styling and will revert to the original CSS styling specified.EG:a style set to red will lose its property once ng-if is revoked.

5 ng-init, ng-show and ng-hide.
ng-hide will work as long as the condition is true else it will show when the condition is false.Eg:Guess !number.

6 ng-class helps in setting a css property for a input box for each condition.

7 ng-repeat to iterate through items in an array or object.
this can be combined with other directives like ng-class to set CSS properties.
ng-options is another directive related to ng-repeat.
ng-options is used to bind data to a select element. It is used in building dynamic forms.

So to populate a html select element in a html it is always better to use a ng-options directive.
8 ng-cloak
---------------------------------------------------------
Lecture-37
Filters provide a way to format data that we are about to display.
Working with static data using ng-init to assign a value to a variable. Using filters to add more features like currency, time stamp, and rounding decimals to a certain number of places. Using filters to filter out data based on a key like the star wars example.
Lecture-38
Controllers are javascript functions which take $scope as a parameter. Inside this controller we can attach properties to this $scope object.
$scope object acts as a glue between controllers and the view. Properties attached in $scope can be accessed in the view.
controllerAS syntax.

Creating angular modules.
First create myApp module and attach it to ng-app="myApp"
Secong create a module and attach a controller to it by defining a variable which is a javascript function called MyController to it.
 angular.module("myApp", []).controller('MyController', MyController);
 MyController is a function which accepts the $scope parameter where we define the properties through the $scope object.
 
Third we create a div and specify ng-controller directive to tell the app to use the controller here.
<div ng-controller = "MyController"
Now we can assess the name property of the $scope here.The name Hello Tamas is displayed in the HTML view which is the view. Hence we see how $scope acts as a glue between controller and the view.
We can also attach a function itself(this function can also accept parameters) to the $scope other than the datatypes itself.

Fourth-How to use ControllerAS syntax in place of $scope to reference the controller functions inside the view.
var vm(view model) = this;here vm is the Controller as syntax.

Lecture-39 AngularJs-Modules
ng-app="myApp".
In the previous Lecture we had the javascript function inside the html itself, now we move all the functions to app.js file and refer our function inside the script tag
Create two separate files called app.js and controller.js and attach the modules in each of them.

Lecture-40
In angular.js single page applications user can navigate through the application without the page being refreshed.Eventhough the URL are changing the app does not refresh.
The single page application will be displayed through routes which serve the HTML.
Each route maps to a url path where we also specify a controller and a template for the URL. 
When the URL changes in the browser, Angular will change the controller and the view template that it is using and display back to the user.
Single page applications work with templates and we need to tell angular where to insert these templates using ng-view. This ng-view tells angular where to insert the template.
In addition to templates we can also assign controllers to the routes.
For doing this we need to include the Angular route library in the script tag in the HTML.

App.js
ngRoute is the dependency we define inside the angular module "myApp"
$route provider is where we define routes. $route provider is also a built in service that we are using.
inside these routes we instruct the template Url and the controllers it should use to serve the html page.

Lecture-41
$http service is another service that allows us to go out and reach various webservices endpoint and get data from there. Created a new folder Lecture41 with separate main and film folders with controllers and html separated. Had the old data in Lectur-41old folder.

Lecture-42
Custom services, Service Vs Factory.
Service that specifies a method to go to different endpoints in each controller and updates it. So we can reuse this application. For this sake we are going to create a service inside a factory folder.

Difference between a service and a factory.
While using a  service we are using the instance of a function. We are using the new function keyword.
Factories- when we use factory name as an injectable argument, it will provide us the value that is  returned by invoking the function reference passed to the module factory function.
Service in Datafactory.js file.
At the end of this lecture we created our own service in datafactory.js file which has all the http requests. The purpose of this is so that if there is an update to any of the endpoints of the http requests we can just change the FilmFactory function at the top and it will automatically update all the controllers.

Lecture-43
Custom Filters. we used dateSuffix filter by using built in dateSuffix of angular js and reverse filter that reverse an input string.
Lecture-44
Building single page app.
In this Lecture we involve angular into the application. For this we tell the back-end server app.js through 
EXPRESS where the node_modules folder is and allow the browser to serve the angular related files. That is how the title of the application mean hotel is shown in the angular view. 

Note: Created a new folder for Section-4 Angular part since the disk storage in Cloud-9 was full.
So I git cloned the old Lecture folders upto Lecture-41 into the mean stack workspace separately.
Also have the whole workspace copied into my c-drive.
After git push of Section-4 into Section-4 branch,
I tried not to merge Section-4 with master so that the old files in master will not be overwritten.
Take note of that.
Lecture-45
In this we go to the back-end API to /api endpoints to get some data into
this application.
Created two new folders hotel-list(how to list hotels inside the app) and hotel-display(with function to display a single hotel) to separate 
each folders.
Under hotel-list we serve an html for the /api/hotels?count=10 endpoint with the functionality
under hotel-list-controller.js that has the HotelsController function in it.
Lecture-46
With the previous Lecture we displayed 10 hotels, in this we will
write function to display data about one selected hotel by the user.

Created hotel-display folder with hotel.html and hotel-display-controller.js with serparate functionalities.
Created a data-factory-folder for creating the service which  has all the http requests. The purpose of this is so that if there is an update to any of the endpoints of the http requests we can just change the dataFactory function at the top and it will automatically update all the controllers.(because all the http requests are defined here and any change here will reflect in the controllers too.

After this we will inject this dataFactory.js file in each of the controllers.(hotel-list-controller.js and hotel-display-controller.js).
Note that we have removed the http get request from the individual controller since the dataFactory.js is now handling the invidual route requests inside it. We also linked the hotelList  and hotelDisplay function from within the hotel-data-factory.js file.

The advantage is that we have all the http get statements under the hotel-data-factory.js.
ANy change made here will reflect in the controllers requiring no more changes to be made.

We have the display of all hotels and also when hotel is clicked it fetches data about one single hotel.
Finally we separated the api calls into the factory file, removed the $http dependency inside the controller and added factory as a dependency inside the controllers. 

Lecture-47
Adding a new custom directive to display rating as stars instead of a number called hotel-rating-directive.js under hotel-rating folder and linked the attributes to the hotel.html file.
Note that we added stars as an attribute to the hotel-rating directive in hotel.html file.

Lecture-49
Storing the user information in the database to create tokens which will inturn
validate the user password and username that sits in the users
's end.
1-For storing the information at the server(backend) we will create a 
file  called users.model.js under api/data folder. Then we have to link this model
in the api/data/db.js file by requiring it.
2-Next we are going to define a controller called users.controller.js.
under api/controllers.js.
3-after defining two functions for register and login we will define the
routes under api/routes/index.js.
4-IN the users.controllers.js we have defined two functions.
The register function will actually create a User if they enter a username, name and password.
and console log the success or error accordingly.

The login function will find one user based on his already created username and password.
Note that in the users.model.js schema
username: {
        type: String,
        unique: true,
        required: true
    },

the unique field is set to true, so if the server identifies the unique user, it will 
find that user and display back their username and password.
5- Encrypting the  password that is in plain text.
6- Finally we have to check if the password that got encrpted in the database is the same as the user entered password.
For this we use the package called bcrypt.
For testing purposes we went to postman to post the username, password. 
When we changed the password it displayed the message 'Unauthorized'.
P.S If you run into any errors with finding package.json run command npm install.
to check if your package.json file is in the current folder.

Lecture-50
Adding JWT(json web token) to the backend and use it in the application.
Download JWT package.
Next in the users.login function when we find the already registered user we use a method on the 
var token called JWT.sign to sign the token by assigning three parameters, the first one being the payload. Inside this payload we assign
a property the username that is coming from the database. We will later on access this username 
and use it in the application.
The second parameter to the jwt.sign method is the secret variable that is declared inline here. 
The third parameter  is the expiresIn parameter that will expire the session in an hour.

Once the jwt.sign method is created and run in postman for the
POST https://homework1-anuradha78.c9users.io/api/users/login route it will create a web token and we ask it send an object with success boolean value and the actual token itself.
{"success":true,"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFudSIsImlhdCI6MTUxOTkyNTY4NywiZXhwIjoxNTE5OTI5Mjg3fQ.sHg3fAhDxpAm1TVeb8BhOsAJ6sBYruy2XT7g4KlT8kI"}
This web token is created since the already registered users, username and password is correct.
We can see that the header, payload and signature is created in the web-token and separated by commas.

Note:This is the token that we have to use to in some requests against some secured endpoints.
For this we create another function for authentication in the users.controllers.js.

Lecture50
How to register a user using AngularJs on the backend by defining register and login routes in index.js.
Also linking a users-contoller.js function to the routes by defining register, login and authenticate function.

Lecture51
Handling authentication from the front end using Angularjs.
First we need to define a page in the browser to handle the registration.
For this we define a route in app.js called '/register'
.when('/register', {
            templateUrl: 'angular-app/register/register.html',
            controller: RegisterController,
            controllerAS: 'vm'
        });    
when someone goes to this page we want the browser to load a templateUrl and a controller
that does certain things.
Once the register.html is served for the register endpoint the form is displayed for the user to
enter their Username, password and repeat password. The ng-submit="vm.register()" function is linked to the register-controller.js
which has RegisterController functions defined in it.
Inside this register-controller.js we are going to collect the user input information provided
in the form(front end) and send it back to the server during the http post request when  the register endpoint is invoked.

Lecture-52
Adding a login form to our application.


